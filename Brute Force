import sympy

def extended_gcd(a, b):
    if b == 0:
        return (a, 1, 0)
    else:
        g, x, y = extended_gcd(b, a % b)
        return (g, y, x - (a // b) * y)

def mod_inverse(a, m):
    g, x, y = extended_gcd(a, m)
    if g != 1:
        raise ValueError('Modular inverse does not exist')
    else:
        return x % m

def brute_force_d(e, phi_n):
    d = 2
    while True:
        if (d * e) % phi_n == 1:
            return d
        d += 1

def factorize(N):
    p = sympy.prevprime(int(N**0.5))
    while N % p != 0:
        p = sympy.prevprime(p - 1)
    q = N // p
    return p, q

def main():
    N = int(input("Enter the RSA modulus (N): "))
    e = int(input("Enter the public exponent (e): "))
    
    p, q = factorize(N)
    phi_n = (p - 1) * (q - 1)
    
    d_mod_inverse = mod_inverse(e, phi_n)
    print("Private exponent d (calculated using modular inverse):", d_mod_inverse)
    
    d_brute_force = brute_force_d(e, phi_n)
    print("Private exponent d (brute force):", d_brute_force)

if __name__ == "__main__":
    main()
